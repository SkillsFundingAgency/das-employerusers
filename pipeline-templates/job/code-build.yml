jobs:
- job: CodeBuild
  pool:
    name: DAS - Continuous Integration
    demands: Agent.OS -equals Windows_NT
  variables:
  - group: BUILD Management Resources
  workspace:
    clean: all
  steps:
  - task: gitversion/setup@0
    displayName: gitversion/setup
    inputs:
      versionSpec: 5.x.x

  - task: gitversion/execute@0
    displayName: gitversion/execute
    inputs:
      useConfigFile: true
      configFilePath: GitVersion.yml

  - task: SonarCloudPrepare@1
    displayName: Prepare SonarCloud analysis configuration
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'PullRequest')))
    inputs:
      SonarCloud: ESFA - SonarCloud
      organization: $(SonarCloudOrganisationKey)
      scannerMode: MSBuild
      projectName: "$(Build.DefinitionName)"
      projectKey: SkillsFundingAgency_das-employerusers
      extraProperties: |
        sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml

  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 4.3.0'
    inputs:
      versionSpec: 4.x

  - task: NuGetCommand@2
    displayName: 'NuGet Restore SFA.DAS.EmployerUsers.sln'
    inputs:
      restoreSolution: 'src/SFA.DAS.EmployerUsers.sln'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore all'
    inputs:
      command: restore
      projects: "src/**/*.csproj"

  - task: VSBuild@1
    displayName: 'Build SFA.DAS.EmployerUsers.sln'
    inputs:
      solution: 'src/SFA.DAS.EmployerUsers.sln'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      clean: true
      vsVersion: '16.0'

  - task: VSBuild@1
    displayName: 'Build SFA.DAS.EmployerUsers.Support.sln'
    inputs:
      solution: 'src/SFA.DAS.EmployerUsers.Support.sln'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      clean: true
      vsVersion: '16.0'

  - task: VSTest@2
    displayName: 'Run NUnit Tests'
    inputs:
      testAssemblyVer2: |
        **/bin/Release/*UnitTests.dll
        **/bin/Release/*/*UnitTests.dll
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud analysis'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'PullRequest')))

  - task: SonarCloudPublish@1
    displayName: 'Publish results on build summary'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'PullRequest')))
    inputs:
      pollingTimeoutSec: '300'

  - task: VSBuild@1
    displayName: 'Publish API'
    inputs:
      solution: src/SFA.DAS.EmployerUsers.Api/SFA.DAS.EmployerUsers.Api.csproj
      vsVersion: '16.0'
      msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:publishUrl="$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Api/"'
      platform: 'anycpu'
      configuration: '$(buildConfiguration)'
      clean: true

  - task: ArchiveFiles@2
    displayName: 'Archive API'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Api'
      archiveFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Api/SFA.DAS.EmployerUsers.Api.zip'

  - task: VSBuild@1
    displayName: 'Publish Web App'
    inputs:
      solution: src/SFA.DAS.EmployerUsers.Web/SFA.DAS.EmployerUsers.Web.csproj
      vsVersion: '16.0'
      msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:publishUrl="$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Web/"'
      platform: 'anycpu'
      configuration: '$(buildConfiguration)'
      clean: true

  - task: ArchiveFiles@2
    displayName: 'Archive Web App'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Web'
      archiveFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Web/SFA.DAS.EmployerUsers.Web.zip'

  - task: VSBuild@1
    displayName: 'Publish WebJob'
    inputs:
      solution: src/SFA.DAS.EmployerUsers.Host.WebJob/SFA.DAS.EmployerUsers.Host.WebJob.csproj
      vsVersion: '16.0'
      msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:publishUrl="$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Host.WebJob/"'
      platform: 'anycpu'
      configuration: '$(buildConfiguration)'
      clean: true

  - task: ArchiveFiles@2
    displayName: 'Archive WebJob'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Host.WebJob'
      archiveFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Host.WebJob/SFA.DAS.EmployerUsers.Host.WebJob.zip'

  - task: VSBuild@1
    displayName: 'Publish Support App'
    inputs:
      solution: src/SFA.DAS.EmployerUsers.Support.Web/SFA.DAS.EmployerUsers.Support.Web.csproj
      vsVersion: '16.0'
      msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:publishUrl="$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Support.Web/"'
      platform: 'anycpu'
      configuration: '$(buildConfiguration)'
      clean: true

  - task: ArchiveFiles@2
    displayName: 'Archive Support App'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Support.Web'
      archiveFile: '$(build.artifactstagingdirectory)/publish/SFA.DAS.EmployerUsers.Support.Web/SFA.DAS.EmployerUsers.Support.Web.zip'

  - task: CopyFiles@2
    displayName: 'Copy dacpac Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      contents: |
        src/**/*.dacpac
      flattenFolders: true
      targetFolder: '$(Build.ArtifactStagingDirectory)/publish/dacpacs/'

  - task: CopyFiles@2
    displayName: 'Copy azure Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      contents: |
        azure/**
      targetFolder: '$(Build.ArtifactStagingDirectory)/publish'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Publish'
    inputs:
      ArtifactName: Publish
      pathtoPublish: '$(build.artifactstagingdirectory)/publish'

  - template: azure-pipelines-templates/build/step/nuget-pack.yml@das-platform-building-blocks
    parameters:
      DotNetFrameworkPackagesToPack: |
        src/SFA.DAS.EmployerUsers.WebClientComponents/SFA.DAS.EmployerUsers.WebClientComponents.csproj
      DotNetStandardPackagesToPack: |
        src/SFA.DAS.EmployerUsers.Api.Client/SFA.DAS.EmployerUsers.Api.Client.csproj;
        src/SFA.DAS.EmployerUsers.Api.Types/SFA.DAS.EmployerUsers.Api.Types.csproj;

- job: 'NET Core CodeBuild'
  pool:
    name: DAS - Continuous Integration Agent.OS
  variables:
  - group: BUILD Management Resources
  workspace:
    clean: all
  steps:
  - template: azure-pipelines-templates/build/step/app-build.yml@das-platform-building-blocks
    parameters:
      TargetProjects: 'src/EmployerProfiles/**/*.csproj'
      UnitTestProjects: 'src/EmployerProfiles/**/*UnitTests.csproj'

  - task: DotNetCoreCLI@2
    displayName: Publish Employer Profiles API
    inputs:
      command: publish
      publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects
      projects: src/EmployerProfiles/SFA.DAS.EmployerProfiles.Api/SFA.DAS.EmployerProfiles.Api.csproj
      arguments: -o $(build.artifactstagingdirectory)/publish -c ${{ parameters.buildConfiguration }} --no-build
      modifyOutputPath: true
      zipAfterPublish: true

  - task: CopyFiles@2
    displayName: 'Copy azure Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      contents: |
        azure/**
      targetFolder: '$(Build.ArtifactStagingDirectory)/publish'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Publish'
    inputs:
      ArtifactName: Publish
      pathtoPublish: '$(build.artifactstagingdirectory)/publish'
