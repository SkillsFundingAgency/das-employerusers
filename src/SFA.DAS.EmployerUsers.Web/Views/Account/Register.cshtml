@model SFA.DAS.EmployerUsers.Web.Models.RegisterViewModel


<h1 class="heading-large">Register</h1>

@if (!Model.Valid)
{
    <div class="validation-summary-errors panel-danger" style="margin-bottom: 10px;">
        <div class="panel-body">
            <ul>
                @if (!string.IsNullOrEmpty(Model.FirstNameError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.FirstName))">@Model.FirstNameError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.LastNameError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.LastName))">@Model.LastNameError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.EmailError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.Email))">@Model.EmailError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.PasswordError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.Password))">@Model.PasswordError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.PasswordComplexityError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.Password))">@Model.PasswordComplexityError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.ConfirmPasswordError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.ConfirmPassword))">@Model.ConfirmPasswordError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.PasswordsDontMatchError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.ConfirmPassword))">@Model.PasswordsDontMatchError</a>
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.HasAcceptedTermsAndConditionsError))
                {
                    <li>
                        <a class="fake-link" href="#@(nameof(Model.HasAcceptedTermsAndConditions))">@Model.HasAcceptedTermsAndConditionsError</a>
                    </li>
                }
            </ul>    
        </div>

    </div>
}

<form method="post" action="@Url.Content("~/identity/employer/register")">
    @Html.AntiForgeryToken()

    <fieldset>
        <legend class="visuallyhidden">email address and password to sign in</legend>

        <div class="form-group @(!string.IsNullOrEmpty(Model.FirstNameError) ? "input-validation-error" : "") ">
            <a name="@nameof(Model.FirstName)"></a>
            <label class="form-label" for="Firstname">First Name</label>
            <input class="form-control" id="Firstname" name="FirstName" value="@Model.FirstName" aria-required="True" aria-invalid="@(!string.IsNullOrEmpty(Model.FirstNameError) ? "True" : "False")">
            @if (!string.IsNullOrEmpty(Model.FirstNameError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.FirstNameError
                </span>
            }

        </div>
        <div class="form-group @(!string.IsNullOrEmpty(Model.LastNameError) ? "input-validation-error" : "") ">
            <a name="@nameof(Model.LastName)"></a>
            <label class="form-label" for="lastname">Last Name</label>
            <input class="form-control" id="lastname" name="LastName" value="@Model.LastName" aria-invalid="@(!string.IsNullOrEmpty(Model.FirstNameError) ? "True" : "False")">
            @if (!string.IsNullOrEmpty(Model.LastNameError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.LastNameError
                </span>
            }
        </div>
        <div class="form-group @(!string.IsNullOrEmpty(Model.EmailError) ? "input-validation-error" : "") ">
            <a name="@nameof(Model.Email)"></a>
            <label class="form-label" for="email-address">Email address</label>
            <input class="form-control" id="email-address" name="Email" type="text" value="@Model.Email" aria-invalid="@(!string.IsNullOrEmpty(Model.EmailError) ? "True" : "False")">
            @if (!string.IsNullOrEmpty(Model.EmailError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.EmailError
                </span>
            }
        </div>
        <div class="form-group @(!string.IsNullOrEmpty(Model.PasswordComplexityError) || !string.IsNullOrEmpty(Model.PasswordError) ? "input-validation-error" : "") ">
            <a name="@nameof(Model.Password)"></a>
            <label class="form-label" for="password">Password</label>
            <input class="form-control" id="password" type="password" name="Password" aria-invalid="@(!string.IsNullOrEmpty(Model.PasswordComplexityError) || !string.IsNullOrEmpty(Model.PasswordError) ? "True" : "False")">
            @if (!string.IsNullOrEmpty(Model.PasswordComplexityError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.PasswordComplexityError
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.PasswordError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.PasswordError
                </span>
            }
        </div>
        <div class="form-group @(!string.IsNullOrEmpty(Model.ConfirmPasswordError) || !string.IsNullOrEmpty(Model.PasswordsDontMatchError) ? "input-validation-error" : "") ">
            <a name="@nameof(Model.ConfirmPassword)"></a>
            <label class="form-label" for="confirmpassword">Confirm Password</label>
            <input class="form-control" id="confirmpassword" type="password" name="ConfirmPassword" aria-invalid="@(!string.IsNullOrEmpty(Model.ConfirmPasswordError) || !string.IsNullOrEmpty(Model.PasswordsDontMatchError) ? "True" : "False")">
            @if (!string.IsNullOrEmpty(Model.ConfirmPasswordError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.ConfirmPasswordError
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.PasswordsDontMatchError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.PasswordsDontMatchError
                </span>
            }
        </div>
        <div class="form-group @(!string.IsNullOrEmpty(Model.HasAcceptedTermsAndConditionsError) ? "input-validation-error" : "")">
            <a name="@nameof(Model.HasAcceptedTermsAndConditions)"></a>
            <label class="block-label">
                <input type="checkbox" class="form-checkbox" id="hasAcceptedTermsAndConditions" name="HasAcceptedTermsAndConditions" value="true" />
                I accept the <a href="@Url.Action("Index", "TermsAndConditions")" target="_blank">terms and conditions</a>
            </label>
            @if (!string.IsNullOrEmpty(Model.HasAcceptedTermsAndConditionsError))
            {
                <span class="field-validation-error" aria-live="polite">
                    @Model.HasAcceptedTermsAndConditionsError
                </span>
            }
        </div>
    </fieldset>
    <button type="submit" class="button">Register</button>
</form>
